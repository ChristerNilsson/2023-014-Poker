// Generated by CoffeeScript 2.5.1
  //    c  d  h  s
  // 2  0  1  2  3
  // 3  4  5  6  7
  // 4  8  9 10 11
  // 5 12 13 14 15
  // 6 16 17 18 19
  // 7 20 21 22 23
  // 8 24 25 26 27
  // 9 28 29 30 31
  // T 32 33 34 35
  // J 36 37 38 39
  // Q 40 41 42 43
  // K 44 45 46 47
  // A 48 49 50 51

// Färger rangordnas ej.
  // Är valörerna lika, splittas potten.

// https://www.pokerlistings.com/which-hand-wins-calculator
var COLORS, Hand, VALUES, ass, color, compare, hands, log, range, sort, spaceOp, toLitteral, toNumber, value,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

range = _.range;

ass = (a, b) => {
  if (a !== b) {
    return console.log('Assert failed', a, '!=', b);
  }
};

sort = (lst) => {
  return lst.sort((a, b) => {
    return b - a;
  });
};

spaceOp = (a, b) => {
  if (a === b) {
    return 0; // lika
  } else if (a < b) {
    return 1;
  } else {
    return -1; // 1=stigande, -1=fallande
  }
};

compare = (na, nb) => {
  var a, b, res;
  a = hands[na];
  b = hands[nb];
  res = spaceOp(a.comp, b.comp);
  console.log(na, '<=>', nb, 'Vinnare:', [na, 'split', nb][res + 1]);
  return res;
};

log = function(x) {
  console.log(x);
  return x;
};

COLORS = 'cdhs'.split(''); // clubs, diamonds, hearts, spades

VALUES = '23456789TJQKA'.split(''); // ten, jack, queen, king, ace

toNumber = function(card) {
  var c, v;
  c = COLORS.indexOf(card[0]);
  v = VALUES.indexOf(card[1]);
  return c + v * COLORS.length;
};

ass(0, toNumber('c2'));

ass(1, toNumber('d2'));

ass(51, toNumber('sA'));

toLitteral = function(card) {
  var c, v;
  c = modulo(card, COLORS.length);
  v = Math.floor(card / COLORS.length);
  return COLORS[c] + VALUES[v];
};

ass('c2', toLitteral(0));

ass('d2', toLitteral(1));

ass('hA', toLitteral(50));

ass('sA', toLitteral(51));

value = (number) => {
  return Math.floor(number / 4);
};

ass(12, value(51));

ass(0, value(0));

color = (number) => {
  return modulo(number, 4);
};

ass(3, color(51));

ass(0, color(0));

Hand = class Hand {
  constructor(str, facit) {
    this.draw = this.draw.bind(this);
    this.show = this.show.bind(this);
    this.vc = this.vc.bind(this);
    this.evaluate = this.evaluate.bind(this);
    this.str = str;
    this.facit = facit;
    this.lst = this.str.split(' ');
    this.lst = _.map(this.lst, (card) => {
      return toNumber(card);
    });
    this.lst = sort(this.lst, (a, b) => {
      return b - a;
    });
    this.evaluate();
    ass(this.comp, this.facit);
  }

  draw(j) {
    var card, i, k, len, ref;
    textAlign(RIGHT);
    text(j, 30, 20 + 20 * j);
    textAlign(LEFT);
    ref = this.lst;
    for (i = k = 0, len = ref.length; k < len; i = ++k) {
      card = ref[i];
      this.show(card, i, j);
    }
    fill('black');
    return text(this.comp, 240, 20 + 20 * j);
  }

  show(card, i, j) {
    var c, v;
    c = modulo(card, COLORS.length);
    v = Math.floor(card / COLORS.length);
    fill("black red red black".split(" ")[c]);
    return text(COLORS[c] + VALUES[v], 40 + 40 * i, 20 + 20 * j);
  }

  vc() {
    var mapper, res;
    mapper = {
      A: 'E',
      K: 'D',
      Q: 'C',
      J: 'B',
      T: 'A'
    };
    res = _.map(this.valueCount[1], (item) => {
      return mapper[item] || item;
    });
    return res.join("");
  }

  evaluate() {
    this.valueCount = this.groupValues();
    this.colorCount = this.groupColors();
    this.comp = '0';
    if (this.valueCount[0] === '2111') {
      this.comp = '1';
    }
    if (this.valueCount[0] === '221') {
      this.comp = '2';
    }
    if (this.valueCount[0] === '311') {
      this.comp = '3';
    }
    if (this.valueCount[0] === '32') {
      this.comp = '6';
    }
    if (this.valueCount[0] === '41') {
      this.comp = '7';
    }
    if (this.valueCount[0] === '11111') {
      if (this.färg() && this.stege()) {
        this.comp = '8';
      } else if (this.färg()) {
        this.comp = '5';
      } else if (this.stege()) {
        this.comp = '4';
      }
    }
    return this.comp += ':' + this.vc();
  }

  stege() {
    if (this.valueCount[1] === 'A5432') {
      this.valueCount[1] = '5';
      return true;
    }
    if (4 === Math.abs(value(this.lst[0]) - value(this.lst[4]))) {
      this.valueCount[1] = this.valueCount[1][0];
      return true;
    }
    return false;
  }

  färg() {
    return this.colorCount === '5';
  }

  groupValues() {
    var arr, c0, c1, card, index, k, len, ref, res;
    arr = [];
    ref = this.lst;
    for (k = 0, len = ref.length; k < len; k++) {
      card = ref[k];
      index = Math.floor(card / 4);
      if (!arr[index]) {
        arr[index] = [0, Math.floor(card / 4)];
      }
      arr[index][0]++;
    }
    arr = _.compact(arr);
    res = arr.sort((a, b) => {
      return b[0] - a[0] || b[1] - a[1];
    });
    c0 = _.map(res, (a) => {
      return a[0];
    });
    c1 = _.map(res, (a) => {
      return VALUES[a[1]];
    });
    return [c0.join(""), c1.join("")];
  }

  groupColors() {
    var arr, card, k, len, ref;
    arr = [0, 0, 0, 0];
    ref = this.lst;
    for (k = 0, len = ref.length; k < len; k++) {
      card = ref[k];
      arr[modulo(card, 4)]++;
    }
    arr = _.compact(arr); // tar bort alla nollor
    if (arr.length === 1) {
      return '5';
    } else {
      return '';
    }
  }

};

hands = [];

hands.push(new Hand("h3 d4 sA c5 c6", '0:E6543')); // 0

hands.push(new Hand("h3 d4 sA c7 c6", '0:E7643')); // 1

hands.push(new Hand("s3 dJ h3 cQ cT", '1:3CBA')); // 2

hands.push(new Hand("s3 dJ h3 cQ cK", '1:3DCB')); // 3

hands.push(new Hand("s3 dJ c3 cQ cK", '1:3DCB')); // 4

hands.push(new Hand("cA hA cK hK c7", '2:ED7')); // 5

hands.push(new Hand("cA hA sA hK c7", '3:ED7')); // 6

hands.push(new Hand("h5 c4 c3 c2 cA", '4:5')); // 7

hands.push(new Hand("c7 h6 c5 h4 c3", '4:7')); // 8

hands.push(new Hand("hA cK cQ cJ cT", '4:E')); // 9

hands.push(new Hand("h5 h6 h7 h9 h3", '5:97653')); // 10

hands.push(new Hand("s5 s6 s7 s9 s3", '5:97653')); // 11

hands.push(new Hand("h5 h6 h8 h9 h3", '5:98653')); // 12

hands.push(new Hand("cQ hQ sQ hJ cJ", '6:CB')); // 13

hands.push(new Hand("s5 h5 c9 d5 c5", '7:59')); // 14

hands.push(new Hand("cA c2 c4 c3 c5", '8:5')); // 15

hands.push(new Hand("c2 c3 c4 c5 c6", '8:6')); // 16

hands.push(new Hand("cK cT cJ cQ c9", '8:D')); // 17

hands.push(new Hand("cT cJ cQ cK cA", '8:E')); // 18

ass(0, compare(0, 0));

ass(1, compare(0, 1));

ass(1, compare(0, 2));

ass(1, compare(2, 3));

ass(0, compare(3, 3));

ass(0, compare(3, 4));

ass(1, compare(6, 7));

ass(1, compare(5, 6));

ass(1, compare(5, 7));

ass(1, compare(8, 9));

ass(0, compare(10, 11));

ass(1, compare(10, 12));

ass(1, compare(13, 14));

ass(1, compare(15, 16));

ass(1, compare(17, 18));

window.setup = function() {
  var hand, j, k, len, results;
  createCanvas(500, 400);
  background("lightgray");
  textSize(20);
  textFont("Courier New");
  results = [];
  for (j = k = 0, len = hands.length; k < len; j = ++k) {
    hand = hands[j];
    results.push(hand.draw(j));
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-014-Poker\coffee\sketch.coffee